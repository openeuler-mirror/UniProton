diff -uparN libmetal-2022.10.0/cmake/platforms/uniproton_arm64_gcc.cmake libmetal/cmake/platforms/uniproton_arm64_gcc.cmake
--- libmetal-2022.10.0/cmake/platforms/uniproton_arm64_gcc.cmake	1970-01-01 08:00:00.000000000 +0800
+++ libmetal/cmake/platforms/uniproton_arm64_gcc.cmake	2023-02-22 11:01:30.000000000 +0800
@@ -0,0 +1,16 @@
+#cross-compilation config
+
+set(CMAKE_SYSTEM_PROCESSOR arm)
+set(PROJECT_SYSTEM uniproton)
+
+set(CMAKE_C_COMPILER_WORKS 1)
+set(CMAKE_CXX_COMPILER_WORKS 1)
+
+set(CROSS_PREFIX "/opt/buildtools/gcc-arm-10.3-2021.07-x86_64-aarch64-none-elf/bin/aarch64-none-elf-" CACHE STRING "")
+set(CMAKE_C_COMPILER	"${CROSS_PREFIX}gcc" CACHE STRING "")
+set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER CACHE STRING "")
+set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY NEVER CACHE STRING "")
+set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE NEVER CACHE STRING "")
+set(CMAKE_C_FLAGS "-D_GNU_SOURCE -D_POSIX_THREADS -D_POSIX_THREAD_PRIORITY_SCHEDULING -D_POSIX_PRIORITY_SCHEDULING -D_POSIX_TIMERS -D_POSIX_CPUTIME -D_POSIX_THREAD_CPUTIME -D_POSIX_MONOTONIC_CLOCK -D_POSIX_TIMEOUTS -D_POSIX_CLOCK_SELECTION -D_POSIX_THREAD_PRIO_PROTECT -D_UNIX98_THREAD_MUTEX_ATTRIBUTES -D_POSIX_READER_WRITER_LOCKS" CACHE STRING "")
+
+# vim: expandtab:ts=2:sw=2:smartindent
diff -uparN libmetal-2022.10.0/CMakeLists.txt libmetal/CMakeLists.txt
--- libmetal-2022.10.0/CMakeLists.txt	2022-10-28 10:12:23.000000000 +0800
+++ libmetal/CMakeLists.txt	2023-02-24 16:25:04.000000000 +0800
@@ -6,7 +6,8 @@ endif()
 if (POLICY CMP0077)
   cmake_policy(SET CMP0077 NEW)
 endif()
-
+include_directories(../../include)
+set (CMAKE_SYSTEM_NAME Uniproton)
 set (LIBMETAL_ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}")
 
 list (APPEND CMAKE_MODULE_PATH
diff -uparN libmetal-2022.10.0/lib/system/uniproton/alloc.h libmetal/lib/system/uniproton/alloc.h
--- libmetal-2022.10.0/lib/system/uniproton/alloc.h	1970-01-01 08:00:00.000000000 +0800
+++ libmetal/lib/system/uniproton/alloc.h	2023-02-20 14:53:22.000000000 +0800
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) 2017, Linaro Limited. and Contributors. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+/*
+ * @file	uniproton/alloc.h
+ * @brief	Uniproton libmetal memory allocattion definitions.
+ */
+
+#ifndef __METAL_ALLOC__H__
+#error "Include metal/alloc.h instead of metal/uniproton/alloc.h"
+#endif
+
+#ifndef __METAL_UNIPROTON_ALLOC__H__
+#define __METAL_UNIPROTON_ALLOC__H__
+
+#include "prt_mem.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+static inline void *metal_allocate_memory(unsigned int size)
+{
+	return PRT_MemAlloc(OS_MID_SYS, OS_MEM_DEFAULT_PT0, size);
+}
+
+static inline void metal_free_memory(void *ptr)
+{
+	PRT_MemFree(OS_MID_SYS, ptr);
+}
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* __METAL_UNIPROTON_ALLOC__H__ */
diff -uparN libmetal-2022.10.0/lib/system/uniproton/assert.h libmetal/lib/system/uniproton/assert.h
--- libmetal-2022.10.0/lib/system/uniproton/assert.h	1970-01-01 08:00:00.000000000 +0800
+++ libmetal/lib/system/uniproton/assert.h	2022-12-26 10:59:44.000000000 +0800
@@ -0,0 +1,26 @@
+/*
+ * Copyright (c) 2018, Xilinx Inc. and Contributors. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+/*
+ * @file	assert.h
+ * @brief	Uniproton assertion support.
+ */
+
+#ifndef __METAL_ASSERT__H__
+#error "Include metal/assert.h instead of metal/uniproton/assert.h"
+#endif
+
+#ifndef __METAL_UNIPROTON_ASSERT__H__
+#define __METAL_UNIPROTON_ASSERT__H__
+
+/**
+ * @brief Assertion macro.
+ * @param cond Condition to test.
+ */
+#define metal_sys_assert(cond)
+
+#endif /* __METAL_UNIPROTON_ASSERT__H__ */
+
diff -uparN libmetal-2022.10.0/lib/system/uniproton/cache.h libmetal/lib/system/uniproton/cache.h
--- libmetal-2022.10.0/lib/system/uniproton/cache.h	1970-01-01 08:00:00.000000000 +0800
+++ libmetal/lib/system/uniproton/cache.h	2022-12-26 11:02:08.000000000 +0800
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) 2018, Linaro Limited. and Contributors. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+/*
+ * @file	uniproton/cache.h
+ * @brief	Uniproton cache operation primitives for libmetal.
+ */
+
+#ifndef __METAL_CACHE__H__
+#error "Include metal/cache.h instead of metal/uniproton/cache.h"
+#endif
+
+#ifndef __METAL_UNIPROTON_CACHE__H__
+#define __METAL_UNIPROTON_CACHE__H__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+static inline void __metal_cache_flush(void *addr, unsigned int len)
+{
+	(void)addr;
+	(void)len;
+}
+
+static inline void __metal_cache_invalidate(void *addr, unsigned int len)
+{
+	(void)addr;
+	(void)len;
+}
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* __METAL_UNIPROTON_CACHE__H__ */
diff -uparN libmetal-2022.10.0/lib/system/uniproton/CMakeLists.txt libmetal/lib/system/uniproton/CMakeLists.txt
--- libmetal-2022.10.0/lib/system/uniproton/CMakeLists.txt	1970-01-01 08:00:00.000000000 +0800
+++ libmetal/lib/system/uniproton/CMakeLists.txt	2022-12-26 14:13:48.000000000 +0800
@@ -0,0 +1,17 @@
+collect (PROJECT_LIB_HEADERS alloc.h)
+collect (PROJECT_LIB_HEADERS assert.h)
+collect (PROJECT_LIB_HEADERS cache.h)
+collect (PROJECT_LIB_HEADERS condition.h)
+collect (PROJECT_LIB_HEADERS io.h)
+collect (PROJECT_LIB_HEADERS irq.h)
+collect (PROJECT_LIB_HEADERS log.h)
+collect (PROJECT_LIB_HEADERS mutex.h)
+collect (PROJECT_LIB_HEADERS sleep.h)
+collect (PROJECT_LIB_HEADERS sys.h)
+
+collect (PROJECT_LIB_SOURCES condition.c)
+collect (PROJECT_LIB_SOURCES device.c)
+collect (PROJECT_LIB_SOURCES init.c)
+collect (PROJECT_LIB_SOURCES shmem.c)
+
+# vim: expandtab:ts=2:sw=2:smartindent
diff -uparN libmetal-2022.10.0/lib/system/uniproton/condition.c libmetal/lib/system/uniproton/condition.c
--- libmetal-2022.10.0/lib/system/uniproton/condition.c	1970-01-01 08:00:00.000000000 +0800
+++ libmetal/lib/system/uniproton/condition.c	2022-12-26 11:06:12.000000000 +0800
@@ -0,0 +1,33 @@
+/*
+ * Copyright (c) 2017, Linaro Limited. and Contributors. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+/*
+ * @file	uniproton/condition.c
+ * @brief	Uniproton libmetal condition variable handling.
+ */
+
+#include <metal/condition.h>
+#include <metal/irq.h>
+#include <metal/errno.h>
+
+int metal_condition_wait(struct metal_condition *cv,
+			 metal_mutex_t *m)
+{
+	unsigned int flags;
+
+	/* Check if the mutex has been acquired */
+	if (!cv || !m || !metal_mutex_is_acquired(m)) {
+		return -EINVAL;
+	}
+
+	flags = metal_irq_save_disable();
+	/* Release the mutex first. */
+	metal_mutex_release(m);
+	metal_irq_restore_enable(flags);
+	/* Acquire the mutex again. */
+	metal_mutex_acquire(m);
+	return 0;
+}
diff -uparN libmetal-2022.10.0/lib/system/uniproton/condition.h libmetal/lib/system/uniproton/condition.h
--- libmetal-2022.10.0/lib/system/uniproton/condition.h	1970-01-01 08:00:00.000000000 +0800
+++ libmetal/lib/system/uniproton/condition.h	2022-12-26 11:09:02.000000000 +0800
@@ -0,0 +1,30 @@
+/*
+ * Copyright (c) 2017, Linaro Limited. and Contributors. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+/*
+ * @file	uniproton/condition.h
+ * @brief	Uniproton condition variable primitives for libmetal.
+ */
+
+#ifndef __METAL_CONDITION__H__
+#error "Include metal/condition.h instead of metal/uniproton/condition.h"
+#endif
+
+#ifndef __METAL_UNIPROTON_CONDITION__H__
+#define __METAL_UNIPROTON_CONDITION__H__
+
+#include <metal/mutex.h>
+#include <metal/utilities.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* __METAL_UNIPROTON_CONDITION__H__ */
diff -uparN libmetal-2022.10.0/lib/system/uniproton/device.c libmetal/lib/system/uniproton/device.c
--- libmetal-2022.10.0/lib/system/uniproton/device.c	1970-01-01 08:00:00.000000000 +0800
+++ libmetal/lib/system/uniproton/device.c	2022-12-26 11:13:30.000000000 +0800
@@ -0,0 +1,21 @@
+/*
+ * Copyright (c) 2017, Linaro Limited. and Contributors. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+/*
+ * @file	uniproton/device.c
+ * @brief	Uniproton libmetal device definitions.
+ */
+
+#include <metal/device.h>
+#include <metal/io.h>
+#include <metal/sys.h>
+#include <metal/utilities.h>
+
+int metal_generic_dev_sys_open(struct metal_device *dev)
+{
+	return 0;
+}
+
diff -uparN libmetal-2022.10.0/lib/system/uniproton/init.c libmetal/lib/system/uniproton/init.c
--- libmetal-2022.10.0/lib/system/uniproton/init.c	1970-01-01 08:00:00.000000000 +0800
+++ libmetal/lib/system/uniproton/init.c	2022-12-26 11:14:34.000000000 +0800
@@ -0,0 +1,27 @@
+/*
+ * Copyright (c) 2017, Linaro Limited. and Contributors. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+/*
+ * @file	uniproton/init.c
+ * @brief	Uniproton libmetal initialization.
+ */
+
+#include <metal/device.h>
+#include <metal/sys.h>
+
+struct metal_state _metal;
+
+int metal_sys_init(const struct metal_init_params *params)
+{
+	(void)params;
+	metal_bus_register(&metal_generic_bus);
+	return 0;
+}
+
+void metal_sys_finish(void)
+{
+	metal_bus_unregister(&metal_generic_bus);
+}
diff -uparN libmetal-2022.10.0/lib/system/uniproton/io.h libmetal/lib/system/uniproton/io.h
--- libmetal-2022.10.0/lib/system/uniproton/io.h	1970-01-01 08:00:00.000000000 +0800
+++ libmetal/lib/system/uniproton/io.h	2022-12-26 11:16:50.000000000 +0800
@@ -0,0 +1,37 @@
+/*
+ * Copyright (c) 2017, Linaro Limited. and Contributors. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+/*
+ * @file	uniproton/io.h
+ * @brief	Uniproton specific io definitions.
+ */
+
+#ifndef __METAL_IO__H__
+#error "Include metal/io.h instead of metal/uniproton/io.h"
+#endif
+
+#ifndef __METAL_UNIPROTON_IO__H__
+#define __METAL_UNIPROTON_IO__H__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#ifdef METAL_INTERNAL
+/**
+ * @brief memory mapping for an I/O region
+ */
+static inline void metal_sys_io_mem_map(struct metal_io_region *io)
+{
+	(void)io;
+}
+#endif
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* __METAL_UNIPROTON_IO__H__ */
diff -uparN libmetal-2022.10.0/lib/system/uniproton/irq.h libmetal/lib/system/uniproton/irq.h
--- libmetal-2022.10.0/lib/system/uniproton/irq.h	1970-01-01 08:00:00.000000000 +0800
+++ libmetal/lib/system/uniproton/irq.h	2022-12-26 11:17:54.000000000 +0800
@@ -0,0 +1,27 @@
+/*
+ * Copyright (c) 2017, Linaro Limited. and Contributors. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+/*
+ * @file	uniproton/irq.c
+ * @brief	Uniproton libmetal irq definitions.
+ */
+
+#ifndef __METAL_IRQ__H__
+#error "Include metal/irq.h instead of metal/uniproton/irq.h"
+#endif
+
+#ifndef __METAL_UNIPROTON_IRQ__H__
+#define __METAL_UNIPROTON_IRQ__H__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* __METAL_UNIPROTON_IRQ__H__ */
diff -uparN libmetal-2022.10.0/lib/system/uniproton/log.h libmetal/lib/system/uniproton/log.h
--- libmetal-2022.10.0/lib/system/uniproton/log.h	1970-01-01 08:00:00.000000000 +0800
+++ libmetal/lib/system/uniproton/log.h	2022-12-26 11:19:38.000000000 +0800
@@ -0,0 +1,27 @@
+/*
+ * Copyright (c) 2018, Xilinx Inc. and Contributors. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+/*
+ * @file	uniproton/log.h
+ * @brief	Uniproton libmetal log handler definition.
+ */
+
+#ifndef __METAL_METAL_LOG__H__
+#error "Include metal/log.h instead of metal/uniproton/log.h"
+#endif
+
+#ifndef __METAL_UNIPROTON_LOG__H__
+#define __METAL_UNIPROTON_LOG__H__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* __METAL_UNIPROTON_LOG__H__ */
diff -uparN libmetal-2022.10.0/lib/system/uniproton/mutex.h libmetal/lib/system/uniproton/mutex.h
--- libmetal-2022.10.0/lib/system/uniproton/mutex.h	1970-01-01 08:00:00.000000000 +0800
+++ libmetal/lib/system/uniproton/mutex.h	2023-02-23 14:22:12.000000000 +0800
@@ -0,0 +1,73 @@
+/*
+ * Copyright (c) 2017, Linaro Limited. and Contributors. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+/*
+ * @file	uniproton/mutex.h
+ * @brief	Uniproton mutex primitives for libmetal.
+ */
+
+#ifndef __METAL_MUTEX__H__
+#error "Include metal/mutex.h instead of metal/uniproton/mutex.h"
+#endif
+
+#ifndef __METAL_UNIPROTON_MUTEX__H__
+#define __METAL_UNIPROTON_MUTEX__H__
+
+#include "errno.h"
+#include "pthread.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+typedef pthread_mutex_t metal_mutex_t;
+
+/*
+ * METAL_MUTEX_INIT - used for initializing an mutex element in a static struct
+ * or global
+ */
+#define METAL_MUTEX_INIT(m) MUTEX_INITIALIZER
+/*
+ * METAL_MUTEX_DEFINE - used for defining and initializing a global or
+ * static singleton mutex
+ */
+#define METAL_MUTEX_DEFINE(m) metal_mutex_t m = MUTEX_INITIALIZER
+
+static inline void __metal_mutex_init(metal_mutex_t *mutex)
+{
+	pthread_mutex_init(mutex, NULL);
+}
+
+static inline void __metal_mutex_deinit(metal_mutex_t *mutex)
+{
+	pthread_mutex_destroy(mutex);
+}
+
+static inline int __metal_mutex_try_acquire(metal_mutex_t *mutex)
+{
+	return pthread_mutex_trylock(mutex);
+}
+
+static inline int __metal_mutex_is_acquired(metal_mutex_t *mutex)
+{
+	
+}
+
+static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
+{
+	pthread_mutex_lock(mutex);
+}
+
+static inline void __metal_mutex_release(metal_mutex_t *mutex)
+{
+	pthread_mutex_unlock(mutex);
+}
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* __METAL_UNIPROTON_MUTEX__H__ */
diff -uparN libmetal-2022.10.0/lib/system/uniproton/shmem.c libmetal/lib/system/uniproton/shmem.c
--- libmetal-2022.10.0/lib/system/uniproton/shmem.c	1970-01-01 08:00:00.000000000 +0800
+++ libmetal/lib/system/uniproton/shmem.c	2022-12-26 11:20:44.000000000 +0800
@@ -0,0 +1,19 @@
+/*
+ * Copyright (c) 2017, Linaro Limited. and Contributors. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+/*
+ * 
+ * @file	uniproton/shmem.c
+ * @brief	Uniproton libmetal shared memory handling.
+ */
+
+#include <metal/shmem.h>
+
+int metal_shmem_open(const char *name, size_t size,
+		     struct metal_io_region **io)
+{
+	return metal_shmem_open_generic(name, size, io);
+}
diff -uparN libmetal-2022.10.0/lib/system/uniproton/sleep.h libmetal/lib/system/uniproton/sleep.h
--- libmetal-2022.10.0/lib/system/uniproton/sleep.h	1970-01-01 08:00:00.000000000 +0800
+++ libmetal/lib/system/uniproton/sleep.h	2023-02-22 16:55:06.000000000 +0800
@@ -0,0 +1,34 @@
+/*
+ * Copyright (c) 2018, Linaro Limited. and Contributors. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+/*
+ * @file	uniproton/sleep.h
+ * @brief	Uniproton sleep primitives for libmetal.
+ */
+
+#ifndef __METAL_SLEEP__H__
+#error "Include metal/sleep.h instead of metal/uniproton/sleep.h"
+#endif
+
+#ifndef __METAL_UNIPROTON_SLEEP__H__
+#define __METAL_UNIPROTON_SLEEP__H__
+
+#include "prt_task.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+static inline int __metal_sleep_usec(unsigned int usec)
+{
+	return PRT_TaskDelay((U32)(usec / 1000));
+}
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* __METAL_UNIPROTON_SLEEP__H__ */
diff -uparN libmetal-2022.10.0/lib/system/uniproton/sys.h libmetal/lib/system/uniproton/sys.h
--- libmetal-2022.10.0/lib/system/uniproton/sys.h	1970-01-01 08:00:00.000000000 +0800
+++ libmetal/lib/system/uniproton/sys.h	2022-12-26 11:25:18.000000000 +0800
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) 2017, Linaro Limited. and Contributors. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+/*
+ * @file	uniproton/sys.h
+ * @brief	Uniproton system primitives for libmetal.
+ */
+
+#ifndef __METAL_SYS__H__
+#error "Include metal/sys.h instead of metal/uniproton/sys.h"
+#endif
+
+#ifndef __METAL_UNIPROTON_SYS__H__
+#define __METAL_UNIPROTON_SYS__H__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define METAL_INIT_DEFAULTS				\
+{							\
+	.log_handler	= metal_default_log_handler,	\
+	.log_level	= METAL_LOG_INFO,		\
+}
+
+/** Structure of libmetal runtime state. */
+struct metal_state {
+	/** Common (system independent) data. */
+	struct metal_common_state common;
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* __METAL_UNIPROTON_SYS__H__ */
