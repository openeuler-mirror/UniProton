diff -uprN ccl-0.1.1.orig/ccl/ccl.h ccl-0.1.1/ccl/ccl.h
--- ccl-0.1.1.orig/ccl/ccl.h	2004-04-16 01:53:26.000000000 +0800
+++ ccl-0.1.1/ccl/ccl.h	2023-12-12 09:29:53.755992818 +0800
@@ -27,6 +27,8 @@
 
 #include "ccl/bst.h"
 
+#define PACKAGE "ccl"
+
 /*! \file ccl.h
  * \brief The ccl library interface
  */
diff -uprN ccl-0.1.1.orig/ccl/ccl_parse.c ccl-0.1.1/ccl/ccl_parse.c
--- ccl-0.1.1.orig/ccl/ccl_parse.c	2004-04-16 01:48:34.000000000 +0800
+++ ccl-0.1.1/ccl/ccl_parse.c	2023-12-12 09:29:53.755992818 +0800
@@ -136,7 +136,7 @@ ccl_parse(struct ccl_t *data,
 	  t = token;
 
 	  /* Enlarge buffer, if needed */
-	  if(t > tok_limit) {
+	  if(t >= tok_limit) {
 	    int count = t - token;
 	    token = (char*) realloc(token, tok_cap * 2);
 	    if(token == 0) {
@@ -180,7 +180,7 @@ ccl_parse(struct ccl_t *data,
 	}
 	else {
 	  /* Enlarge buffer, if needed */
-	  if(t > tok_limit) {
+	  if(t >= tok_limit) {
 	    int count = t - token;
 	    token = (char*) realloc(token, tok_cap * 2);
 	    if(token == 0) {
@@ -234,7 +234,7 @@ ccl_parse(struct ccl_t *data,
 	}
 	else {
 	  /* Enlarge buffer, if needed */
-	  if(t > tok_limit) {
+	  if(t >= tok_limit) {
 	    int count = t - token;
 	    token = (char*) realloc(token, tok_cap * 2);
 	    if(token == 0) {
diff -uprN ccl-0.1.1.orig/CMakeLists.txt ccl-0.1.1/CMakeLists.txt
--- ccl-0.1.1.orig/CMakeLists.txt	1970-01-01 08:00:00.000000000 +0800
+++ ccl-0.1.1/CMakeLists.txt	2023-12-12 09:42:57.031989830 +0800
@@ -0,0 +1,5 @@
+include_directories(${CMAKE_CURRENT_SOURCE_DIR})
+
+file(GLOB CCL_SRC ${CMAKE_CURRENT_SOURCE_DIR}/ccl/*.c)
+
+add_library(ccl STATIC ${CCL_SRC} ${CMAKE_CURRENT_SOURCE_DIR}/demo/test_entry.c)
diff -uprN ccl-0.1.1.orig/demo/test_entry.c ccl-0.1.1/demo/test_entry.c
--- ccl-0.1.1.orig/demo/test_entry.c	1970-01-01 08:00:00.000000000 +0800
+++ ccl-0.1.1/demo/test_entry.c	2023-12-12 09:29:53.759992817 +0800
@@ -0,0 +1,41 @@
+#include <stdio.h>
+
+#include "ccl/ccl.h"
+
+int test_ccl_conf(const char *conf_path)
+{
+    struct ccl_t             config;
+    const struct ccl_pair_t  *iter;
+    int ret;
+
+    config.comment_char = '#';
+    config.sep_char = '=';
+    config.str_char = '"';
+    ret = ccl_parse(&config, conf_path);
+
+    while((iter = ccl_iterate(&config)) != 0) {
+        printf("(%s,%s)\n", iter->key, iter->value);
+    }
+
+    ccl_release(&config);
+
+    return ret;
+}
+
+void test_ccl()
+{
+    printf("\ntest ccl start\n");
+    const char *simple_path = "./simple.conf";
+    const char *example_path = "./example.conf";
+    printf("\ntest simple.conf\n");
+    if (test_ccl_conf(simple_path)) {
+        printf("test simple.conf failed\n");
+    }
+
+    printf("\ntest example.conf\n");
+    if (test_ccl_conf(example_path)) {
+        printf("test example.conf failed\n");
+    }
+
+    printf("\ntest ccl end\n");
+}
